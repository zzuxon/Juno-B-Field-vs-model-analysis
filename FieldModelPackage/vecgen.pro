;provide a range and number of values, get a vector;give steps,start,stop in the right order. STEPS is actually steps-1 ie the vector will be 1 element longer as you want;OR give steps=..,min=..,max=... STEPS is equal to the number of elements;EXAMPLE;print,vecgen(steps=3,min=0,max=3);      0.00000000       1.5000000       3.0000000Function vecgen,steps,start,stop,steps=steps2,min=min,max=max,forceBound=forceBoundIF n_elements(forceBound) eq 0 THEN forceBound=0IF n_elements(steps2) ne 0 THEN steps=steps2-1IF n_elements(min) ne 0 THEN start=minIF n_elements(max) ne 0 THEN stop=maxDelta=abs(max([start,stop])-min([start,stop]))*1d/stepsvec=min([start,stop])+lindgen(steps+1)*DeltaIF forceBound ne 0 THEN vec(n_elements(vec)-1)=stopreturn,vecEnd;similar as VECGEN but instead of giving a number of steps, give the DELTA between the steps. Number of elements will be calculated automatically;;forceBound=1 forces last value to be equal to STOP value. otherwise it is determined by the stepsize;EXAMPLE;print,vecgen2(0.5,0,2);     0.000000     0.500000      1.00000      1.50000      2.00000Function vecgen2,delta,start,stop,forceBound=forceBoundIF n_elements(forceBound) eq 0 THEN forceBound=0steps=round(abs(start-stop)*1d/Delta);not roundUPvec=start+lindgen(steps+1)*DeltaIF forceBound ne 0 THEN vec(n_elements(vec)-1)=stopreturn, vecEnd